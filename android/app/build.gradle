plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace "com.yao.work_rest_timer_flutter"
    compileSdk 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.yao.work_rest_timer_flutter"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk 24
        targetSdk 34
        versionCode flutterVersionCode
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            def keystorePropertiesFile = rootProject.file("key.properties")
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
    buildToolsVersion '34.0.0'
}

flutter {
    source '../..'
}

def javaHome = System.getenv('JAVA_HOME')
if (javaHome) {
    project.ext.set('org.gradle.java.home', javaHome)
}
def flutterVersionCode = getFlutterVersionCode()
def flutterVersionName = getFlutterVersionName()

def getFlutterVersionCode() {
    def versionFile = file('../../pubspec.yaml') // 修改路径
    def versionText = versionFile.text
    def versionPattern = ~/version:\s*(\d+\.\d+\.\d+)\+(\d+)/
    def versionMatch = versionText =~ versionPattern
    if (versionMatch) {
        return versionMatch[0][2].toInteger() // 获取构建号
    }
    throw new GradleException("Could not find version code in pubspec.yaml")
}

def getFlutterVersionName() {
    def versionFile = file('../../pubspec.yaml') // 修改路径
    def versionText = versionFile.text
    def versionPattern = ~/version:\s*(\d+\.\d+\.\d+)\+(\d+)/
    def versionMatch = versionText =~ versionPattern
    if (versionMatch) {
        return versionMatch[0][1] // 获取版本号
    }
    throw new GradleException("Could not find version name in pubspec.yaml")
}